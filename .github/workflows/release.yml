name: Eclair Release

on:
  # Trigger the workflow on the new 'v*' tag created
  push:
    tags:
      - "v*"

jobs:
  create_release:
    name: Create Github Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  build_artifact:
    needs: [create_release]
    name: ${{ matrix.os }}/GHC ${{ matrix.ghc }}/${{ github.ref }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        ghc-version: ['9.4.4']

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up GHC ${{ matrix.ghc-version }}
        uses: haskell/actions/setup@v2
        id: setup
        with:
          ghc-version: ${{ matrix.ghc-version }}
          # Defaults, added for clarity:
          cabal-version: 'latest'
          cabal-update: true


      - name: Installed tools
        shell: bash
        run: |
          GHC_VERSION=$(ghc --numeric-version)
          CABAL_VERSION=$(cabal --numeric-version)
          echo "GHC_VERSION=${GHC_VERSION}"     >> "${GITHUB_ENV}"
          echo "CABAL_VERSION=${CABAL_VERSION}" >> "${GITHUB_ENV}"
          cabal install hpack
          cabal install hspec-discover
          cabal install hlint
          ghc --version
          cabal --version
          if [ "$RUNNER_OS" == "macOS" ]; then
              echo "Installing llvm-14 on $RUNNER_OS"
              brew install llvm@14
          fi

      - name: Install Souffle
        run: |
          sudo apt install bison build-essential cmake doxygen flex g++ git  libffi-dev libncurses5-dev libsqlite3-dev make mcpp python3 sqlite zlib1g-dev
          git clone git@github.com:souffle-lang/souffle.git
          cd souffle
          git checkout 2.3
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build -j
          sudo cmake --build build --target install
          souffle --version

      - name: Configure the build
        run: |
          cabal configure
          cabal build --dry-run
        # The last step generates dist-newstyle/cache/plan.json for the cache key.

      - name: Restore cached dependencies
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ runner.os }}-ghc-${{ env.GHC_VERSION }}-cabal-${{ env.CABAL_VERSION }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: |
            ${{ runner.os }}-ghc-${{ env.GHC_VERSION }}-cabal-${{ env.CABAL_VERSION }}-
      - name: Install dependencies
        run: cabal build all --only-dependencies

      # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
      - name: Save cached dependencies
        uses: actions/cache/save@v3
        # Caches are immutable, trying to save with the same key would error.
        if: ${{ steps.cache.outputs.cache-primary-key != steps.cache.outputs.cache-matched-key }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Build
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
              export PATH="/usr/local/opt/llvm@14/bin:$PATH"
              echo "PATH=$PATH"
              which llvm-config
          fi
          mkdir dist
          cabal install exe:eclair --install-method=copy --overwrite-policy=always --installdir=dist
          strip ./dist/eclair
          BINARY_PATH=./dist/eclair
          echo "BINARY_PATH=${BINARY_PATH}" >> "${GITHUB_ENV}"

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url

      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          upload_url=$(cat release_url/release_url.txt)

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ env.BINARY_PATH }}
          asset_name: eclair-${{ steps.tag.outputs.tag }}-${{ runner.os }}-ghc-${{ matrix.ghc }}${{ env.EXT }}
          asset_content_type: application/octet-stream
